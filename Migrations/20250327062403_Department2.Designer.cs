// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolSystem.Data;

#nullable disable

namespace SchoolSystem.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250327062403_Department2")]
    partial class Department2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SchoolSystem.Models.ActivityManagement.Activity", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActivityId"));

                    b.Property<string>("ActivityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ActivityType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ActivityId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("SchoolSystem.Models.ActivityManagement.ActivityAttendance", b =>
                {
                    b.Property<int>("AA_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AA_id"));

                    b.Property<int>("AM_id")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Student_id")
                        .HasColumnType("int");

                    b.Property<DateOnly>("TimeStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("AA_id");

                    b.HasIndex("AM_id");

                    b.HasIndex("Student_id");

                    b.ToTable("ActivityAttendances");
                });

            modelBuilder.Entity("SchoolSystem.Models.ActivityManagement.ActivityAttendanceCheck", b =>
                {
                    b.Property<int>("ActivityAttendanceCheckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActivityAttendanceCheckId"));

                    b.Property<int>("AM_Id")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.HasKey("ActivityAttendanceCheckId");

                    b.HasIndex("AM_Id");

                    b.ToTable("ActivityAttendanceCheck");
                });

            modelBuilder.Entity("SchoolSystem.Models.ActivityManagement.ActivityAttendanceSummary", b =>
                {
                    b.Property<int>("AAM_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AAM_Id"));

                    b.Property<int>("AM_id")
                        .HasColumnType("int");

                    b.Property<int?>("AbsentCount")
                        .HasColumnType("int");

                    b.Property<int?>("ExcusedCount")
                        .HasColumnType("int");

                    b.Property<int?>("LateCount")
                        .HasColumnType("int");

                    b.Property<int?>("PresentCount")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("AAM_Id");

                    b.HasIndex("AM_id");

                    b.HasIndex("StudentId");

                    b.ToTable("ActivityAttendanceSummary");
                });

            modelBuilder.Entity("SchoolSystem.Models.ActivityManagement.ActivityManagement", b =>
                {
                    b.Property<int>("AM_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AM_id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int>("CheckCount")
                        .HasColumnType("int");

                    b.Property<int>("SemesterId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("AM_id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("SemesterId");

                    b.ToTable("ActivityManagement");
                });

            modelBuilder.Entity("SchoolSystem.Models.ActivityManagement.ActivitySchedule", b =>
                {
                    b.Property<int>("AS_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AS_id"));

                    b.Property<int>("AM_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AS_id");

                    b.HasIndex("AM_id");

                    b.ToTable("ActivitySchedule");
                });

            modelBuilder.Entity("SchoolSystem.Models.Alert.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NotificationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("NotificationId");

                    b.HasIndex("ProfileId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("SchoolSystem.Models.ClassManagement.Class", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassId"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<int>("ClassNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("GradeLevelId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ClassId");

                    b.HasIndex("GradeLevelId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("SchoolSystem.Models.ClassManagement.ClassAttendance", b =>
                {
                    b.Property<int>("ClassAttendanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassAttendanceId"));

                    b.Property<int>("CM_Id")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("ClassAttendanceId");

                    b.HasIndex("CM_Id");

                    b.HasIndex("StudentId");

                    b.ToTable("ClassAttendance");
                });

            modelBuilder.Entity("SchoolSystem.Models.ClassManagement.ClassAttendanceCheck", b =>
                {
                    b.Property<int>("ClassAttendanceCheckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassAttendanceCheckId"));

                    b.Property<int>("CM_Id")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.HasKey("ClassAttendanceCheckId");

                    b.HasIndex("CM_Id");

                    b.ToTable("ClassAttendanceCheck");
                });

            modelBuilder.Entity("SchoolSystem.Models.ClassManagement.ClassAttendanceSummary", b =>
                {
                    b.Property<int>("SAM_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SAM_Id"));

                    b.Property<int?>("AbsentCount")
                        .HasColumnType("int");

                    b.Property<int>("CM_Id")
                        .HasColumnType("int");

                    b.Property<int?>("ExcusedCount")
                        .HasColumnType("int");

                    b.Property<int?>("LateCount")
                        .HasColumnType("int");

                    b.Property<int?>("PresentCount")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("SAM_Id");

                    b.HasIndex("CM_Id");

                    b.HasIndex("StudentId");

                    b.ToTable("ClassAttendanceSummary");
                });

            modelBuilder.Entity("SchoolSystem.Models.ClassManagement.ClassManagement", b =>
                {
                    b.Property<int>("CM_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CM_Id"));

                    b.Property<int>("CheckCount")
                        .HasColumnType("int");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ScoringCriteria")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("SemesterId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CM_Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("CourseId");

                    b.HasIndex("SemesterId");

                    b.HasIndex("TeacherId");

                    b.ToTable("ClassManagements");
                });

            modelBuilder.Entity("SchoolSystem.Models.ClassManagement.ClassSchedule", b =>
                {
                    b.Property<int>("ScheduleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduleID"));

                    b.Property<int>("CM_ID")
                        .HasColumnType("int");

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ScheduleID");

                    b.HasIndex("CM_ID");

                    b.ToTable("ClassSchedules");
                });

            modelBuilder.Entity("SchoolSystem.Models.ClassManagement.GradeLevels", b =>
                {
                    b.Property<int>("GradeLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GradeLevelId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("GradeLevelId");

                    b.ToTable("GradeLevels");
                });

            modelBuilder.Entity("SchoolSystem.Models.ClassManagement.Semester", b =>
                {
                    b.Property<int>("SemesterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SemesterID"));

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("SemesterNumber")
                        .HasColumnType("int");

                    b.Property<string>("SemesterYear")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("SemesterID");

                    b.ToTable("Semesters");
                });

            modelBuilder.Entity("SchoolSystem.Models.CourseManagement.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<int>("CourseCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Course_Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Objective")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<float>("Unit")
                        .HasColumnType("real");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CourseId");

                    b.HasIndex("CourseCategoryId");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("SchoolSystem.Models.CourseManagement.CourseCategory", b =>
                {
                    b.Property<int>("CourseCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseCategoryId"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CourseCategoryId");

                    b.ToTable("CourseCategories");
                });

            modelBuilder.Entity("SchoolSystem.Models.CurriculumManagement.CompulsoryCourse", b =>
                {
                    b.Property<int>("CC_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CC_Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("CurriculumId")
                        .HasColumnType("int");

                    b.Property<int>("GradeLevelId")
                        .HasColumnType("int");

                    b.HasKey("CC_Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CurriculumId");

                    b.HasIndex("GradeLevelId");

                    b.ToTable("CompulsoryCourses");
                });

            modelBuilder.Entity("SchoolSystem.Models.CurriculumManagement.CompulsoryElectiveCourse", b =>
                {
                    b.Property<int>("CEC_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CEC_Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("CurriculumId")
                        .HasColumnType("int");

                    b.Property<int>("GradeLevelId")
                        .HasColumnType("int");

                    b.HasKey("CEC_Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CurriculumId");

                    b.HasIndex("GradeLevelId");

                    b.ToTable("CompulsoryElectiveCourses");
                });

            modelBuilder.Entity("SchoolSystem.Models.CurriculumManagement.Curriculum", b =>
                {
                    b.Property<int>("CurriculumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CurriculumId"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurriculumName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Curriculum_Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CurriculumId");

                    b.ToTable("Curriculum");
                });

            modelBuilder.Entity("SchoolSystem.Models.CurriculumManagement.ElectiveCourse", b =>
                {
                    b.Property<int>("ES_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ES_Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("CurriculumId")
                        .HasColumnType("int");

                    b.Property<int>("GradeLevelId")
                        .HasColumnType("int");

                    b.HasKey("ES_Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CurriculumId");

                    b.HasIndex("GradeLevelId");

                    b.ToTable("ElectiveCourses");
                });

            modelBuilder.Entity("SchoolSystem.Models.CurriculumManagement.ExtracurricularActivity", b =>
                {
                    b.Property<int>("EA_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EA_Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurriculumId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("EA_Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("CurriculumId");

                    b.ToTable("ExtracurricularActivities");
                });

            modelBuilder.Entity("SchoolSystem.Models.RegistrationManagement.RegisteredCourse", b =>
                {
                    b.Property<int>("RC_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RC_id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<float>("Grade")
                        .HasColumnType("real");

                    b.Property<DateTime>("RegisteredDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("Score")
                        .HasColumnType("real");

                    b.Property<int>("SemesterId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("RC_id");

                    b.HasIndex("CourseId");

                    b.HasIndex("SemesterId");

                    b.HasIndex("StudentId");

                    b.ToTable("RegisteredCourse");
                });

            modelBuilder.Entity("SchoolSystem.Models.UserManagement.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("SchoolSystem.Models.UserManagement.Profiles", b =>
                {
                    b.Property<int>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProfileId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("SchoolSystem.Models.UserManagement.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("EnrollmentDate")
                        .HasColumnType("date");

                    b.Property<float>("GPA")
                        .HasPrecision(3, 2)
                        .HasColumnType("real(3)");

                    b.Property<int?>("ProfileId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Student_Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("StudentId");

                    b.HasIndex("ClassId");

                    b.HasIndex("ProfileId")
                        .IsUnique()
                        .HasFilter("[ProfileId] IS NOT NULL");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("SchoolSystem.Models.UserManagement.Teacher", b =>
                {
                    b.Property<int>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeacherId"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("TeacherId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("SchoolSystem.Models.UserManagement.Users", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SchoolSystem.Models.UserManagement.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SchoolSystem.Models.UserManagement.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Models.UserManagement.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SchoolSystem.Models.UserManagement.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolSystem.Models.ActivityManagement.ActivityAttendance", b =>
                {
                    b.HasOne("SchoolSystem.Models.ActivityManagement.ActivityManagement", "ActivityManagement")
                        .WithMany("ActivityAttendance")
                        .HasForeignKey("AM_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Models.UserManagement.Student", "Student")
                        .WithMany("ActivityAttendance")
                        .HasForeignKey("Student_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivityManagement");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolSystem.Models.ActivityManagement.ActivityAttendanceCheck", b =>
                {
                    b.HasOne("SchoolSystem.Models.ActivityManagement.ActivityManagement", "ActivityManagement")
                        .WithMany("ActivityAttendanceCheck")
                        .HasForeignKey("AM_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivityManagement");
                });

            modelBuilder.Entity("SchoolSystem.Models.ActivityManagement.ActivityAttendanceSummary", b =>
                {
                    b.HasOne("SchoolSystem.Models.ActivityManagement.ActivityManagement", "ActivityManagement")
                        .WithMany("AcitivityAttendanceSummary")
                        .HasForeignKey("AM_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Models.UserManagement.Student", "Student")
                        .WithMany("AcitivityAttendanceSummary")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivityManagement");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolSystem.Models.ActivityManagement.ActivityManagement", b =>
                {
                    b.HasOne("SchoolSystem.Models.ActivityManagement.Activity", "Activity")
                        .WithMany("ActivityManagement")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Models.ClassManagement.Semester", "Semester")
                        .WithMany("ActivityManagement")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("SchoolSystem.Models.ActivityManagement.ActivitySchedule", b =>
                {
                    b.HasOne("SchoolSystem.Models.ActivityManagement.ActivityManagement", "ActivityManagement")
                        .WithMany("ActivitySchedule")
                        .HasForeignKey("AM_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivityManagement");
                });

            modelBuilder.Entity("SchoolSystem.Models.Alert.Notification", b =>
                {
                    b.HasOne("SchoolSystem.Models.UserManagement.Profiles", "Profile")
                        .WithMany("Notification")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("SchoolSystem.Models.ClassManagement.Class", b =>
                {
                    b.HasOne("SchoolSystem.Models.ClassManagement.GradeLevels", "GradeLevels")
                        .WithMany("Classes")
                        .HasForeignKey("GradeLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GradeLevels");
                });

            modelBuilder.Entity("SchoolSystem.Models.ClassManagement.ClassAttendance", b =>
                {
                    b.HasOne("SchoolSystem.Models.ClassManagement.ClassManagement", "ClassManagement")
                        .WithMany("ClassAttendance")
                        .HasForeignKey("CM_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Models.UserManagement.Student", "Student")
                        .WithMany("ClassAttendance")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassManagement");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolSystem.Models.ClassManagement.ClassAttendanceCheck", b =>
                {
                    b.HasOne("SchoolSystem.Models.ClassManagement.ClassManagement", "ClassManagement")
                        .WithMany("ClassAttendanceCheck")
                        .HasForeignKey("CM_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassManagement");
                });

            modelBuilder.Entity("SchoolSystem.Models.ClassManagement.ClassAttendanceSummary", b =>
                {
                    b.HasOne("SchoolSystem.Models.ClassManagement.ClassManagement", "ClassManagement")
                        .WithMany("ClassAttendanceSummary")
                        .HasForeignKey("CM_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Models.UserManagement.Student", "Student")
                        .WithMany("ClassAttendanceSummary")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassManagement");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolSystem.Models.ClassManagement.ClassManagement", b =>
                {
                    b.HasOne("SchoolSystem.Models.ClassManagement.Class", "Class")
                        .WithMany("ClassManagement")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Models.CourseManagement.Course", "Course")
                        .WithMany("ClassManagements")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Models.ClassManagement.Semester", "Semester")
                        .WithMany("ClassManagements")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Models.UserManagement.Teacher", "Teacher")
                        .WithMany("ClassManagements")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Course");

                    b.Navigation("Semester");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SchoolSystem.Models.ClassManagement.ClassSchedule", b =>
                {
                    b.HasOne("SchoolSystem.Models.ClassManagement.ClassManagement", "ClassManagement")
                        .WithMany("ClassSchedules")
                        .HasForeignKey("CM_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassManagement");
                });

            modelBuilder.Entity("SchoolSystem.Models.CourseManagement.Course", b =>
                {
                    b.HasOne("SchoolSystem.Models.CourseManagement.CourseCategory", "CourseCategory")
                        .WithMany("Courses")
                        .HasForeignKey("CourseCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseCategory");
                });

            modelBuilder.Entity("SchoolSystem.Models.CurriculumManagement.CompulsoryCourse", b =>
                {
                    b.HasOne("SchoolSystem.Models.CourseManagement.Course", "Course")
                        .WithMany("CompulsoryCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Models.CurriculumManagement.Curriculum", "Curriculum")
                        .WithMany("CompulsoryCourses")
                        .HasForeignKey("CurriculumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Models.ClassManagement.GradeLevels", "GradeLevel")
                        .WithMany("CompulsoryCourses")
                        .HasForeignKey("GradeLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Curriculum");

                    b.Navigation("GradeLevel");
                });

            modelBuilder.Entity("SchoolSystem.Models.CurriculumManagement.CompulsoryElectiveCourse", b =>
                {
                    b.HasOne("SchoolSystem.Models.CourseManagement.Course", "Course")
                        .WithMany("CompulsoryElectiveCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Models.CurriculumManagement.Curriculum", "Curriculum")
                        .WithMany("CompulsoryElectiveCourses")
                        .HasForeignKey("CurriculumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Models.ClassManagement.GradeLevels", "GradeLevel")
                        .WithMany("CompulsoryElectiveCourses")
                        .HasForeignKey("GradeLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Curriculum");

                    b.Navigation("GradeLevel");
                });

            modelBuilder.Entity("SchoolSystem.Models.CurriculumManagement.ElectiveCourse", b =>
                {
                    b.HasOne("SchoolSystem.Models.CourseManagement.Course", "Course")
                        .WithMany("ElectiveCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Models.CurriculumManagement.Curriculum", "Curriculum")
                        .WithMany("ElectiveCourses")
                        .HasForeignKey("CurriculumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Models.ClassManagement.GradeLevels", "GradeLevel")
                        .WithMany("ElectiveCourses")
                        .HasForeignKey("GradeLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Curriculum");

                    b.Navigation("GradeLevel");
                });

            modelBuilder.Entity("SchoolSystem.Models.CurriculumManagement.ExtracurricularActivity", b =>
                {
                    b.HasOne("SchoolSystem.Models.ActivityManagement.Activity", "Activity")
                        .WithMany("ExtracurricularActivities")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Models.CurriculumManagement.Curriculum", "Curriculum")
                        .WithMany("ExtracurricularActivities")
                        .HasForeignKey("CurriculumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Curriculum");
                });

            modelBuilder.Entity("SchoolSystem.Models.RegistrationManagement.RegisteredCourse", b =>
                {
                    b.HasOne("SchoolSystem.Models.CourseManagement.Course", "Course")
                        .WithMany("RegisteredCourse")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Models.ClassManagement.Semester", "Semester")
                        .WithMany("RegisteredCourse")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Models.UserManagement.Student", "Student")
                        .WithMany("RegisteredCourse")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Semester");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolSystem.Models.UserManagement.Profiles", b =>
                {
                    b.HasOne("SchoolSystem.Models.UserManagement.Users", "User")
                        .WithOne("Profile")
                        .HasForeignKey("SchoolSystem.Models.UserManagement.Profiles", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("SchoolSystem.Models.UserManagement.Student", b =>
                {
                    b.HasOne("SchoolSystem.Models.ClassManagement.Class", "Class")
                        .WithMany("Student")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Models.UserManagement.Profiles", "Profile")
                        .WithOne("Student")
                        .HasForeignKey("SchoolSystem.Models.UserManagement.Student", "ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Class");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("SchoolSystem.Models.UserManagement.Teacher", b =>
                {
                    b.HasOne("SchoolSystem.Models.UserManagement.Department", "Department")
                        .WithMany("Teachers")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Models.UserManagement.Profiles", "Profile")
                        .WithOne("Teacher")
                        .HasForeignKey("SchoolSystem.Models.UserManagement.Teacher", "ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("SchoolSystem.Models.ActivityManagement.Activity", b =>
                {
                    b.Navigation("ActivityManagement");

                    b.Navigation("ExtracurricularActivities");
                });

            modelBuilder.Entity("SchoolSystem.Models.ActivityManagement.ActivityManagement", b =>
                {
                    b.Navigation("AcitivityAttendanceSummary");

                    b.Navigation("ActivityAttendance");

                    b.Navigation("ActivityAttendanceCheck");

                    b.Navigation("ActivitySchedule");
                });

            modelBuilder.Entity("SchoolSystem.Models.ClassManagement.Class", b =>
                {
                    b.Navigation("ClassManagement");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolSystem.Models.ClassManagement.ClassManagement", b =>
                {
                    b.Navigation("ClassAttendance");

                    b.Navigation("ClassAttendanceCheck");

                    b.Navigation("ClassAttendanceSummary");

                    b.Navigation("ClassSchedules");
                });

            modelBuilder.Entity("SchoolSystem.Models.ClassManagement.GradeLevels", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("CompulsoryCourses");

                    b.Navigation("CompulsoryElectiveCourses");

                    b.Navigation("ElectiveCourses");
                });

            modelBuilder.Entity("SchoolSystem.Models.ClassManagement.Semester", b =>
                {
                    b.Navigation("ActivityManagement");

                    b.Navigation("ClassManagements");

                    b.Navigation("RegisteredCourse");
                });

            modelBuilder.Entity("SchoolSystem.Models.CourseManagement.Course", b =>
                {
                    b.Navigation("ClassManagements");

                    b.Navigation("CompulsoryCourses");

                    b.Navigation("CompulsoryElectiveCourses");

                    b.Navigation("ElectiveCourses");

                    b.Navigation("RegisteredCourse");
                });

            modelBuilder.Entity("SchoolSystem.Models.CourseManagement.CourseCategory", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("SchoolSystem.Models.CurriculumManagement.Curriculum", b =>
                {
                    b.Navigation("CompulsoryCourses");

                    b.Navigation("CompulsoryElectiveCourses");

                    b.Navigation("ElectiveCourses");

                    b.Navigation("ExtracurricularActivities");
                });

            modelBuilder.Entity("SchoolSystem.Models.UserManagement.Department", b =>
                {
                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("SchoolSystem.Models.UserManagement.Profiles", b =>
                {
                    b.Navigation("Notification");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SchoolSystem.Models.UserManagement.Student", b =>
                {
                    b.Navigation("AcitivityAttendanceSummary");

                    b.Navigation("ActivityAttendance");

                    b.Navigation("ClassAttendance");

                    b.Navigation("ClassAttendanceSummary");

                    b.Navigation("RegisteredCourse");
                });

            modelBuilder.Entity("SchoolSystem.Models.UserManagement.Teacher", b =>
                {
                    b.Navigation("ClassManagements");
                });

            modelBuilder.Entity("SchoolSystem.Models.UserManagement.Users", b =>
                {
                    b.Navigation("Profile");
                });
#pragma warning restore 612, 618
        }
    }
}
